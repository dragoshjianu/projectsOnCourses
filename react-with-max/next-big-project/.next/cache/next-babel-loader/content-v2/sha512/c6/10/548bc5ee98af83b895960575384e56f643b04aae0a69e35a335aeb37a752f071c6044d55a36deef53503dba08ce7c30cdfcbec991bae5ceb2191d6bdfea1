{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Web Development\\\\projectsOnCourses\\\\react-with-max\\\\next-big-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.selectedMeetup.image,\n    title: props.selectedMeetup.title,\n    address: props.selectedMeetup.address,\n    description: props.selectedMeetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  //fetch data from an API or database\n  const client = await MongoClient.connect('mongodb+srv://dragoshjianu:dragosh23@cluster0.nna1u.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://dragoshjianu:dragosh23@cluster0.nna1u.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["E:/Web Development/projectsOnCourses/react-with-max/next-big-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","selectedMeetup","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","meetupData","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAChC,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,cAAN,CAAqBC,KAD7B;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,cAAN,CAAqBE,KAF7B;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,cAAN,CAAqBG,OAH/B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,cAAN,CAAqBI;AAJnC;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACtC;AACA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACpB,qGADoB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AAENC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AAAV,KAAb,CAAZ;AAFD,GAAP;AAIA;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACpB,qGADoB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMV,cAAc,GAAG,MAAMS,iBAAiB,CAACgB,OAAlB,CAA0B;AAAEZ,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AAAf,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNhB,IAAAA,KAAK,EAAE;AACN2B,MAAAA,UAAU,EAAE;AACXC,QAAAA,EAAE,EAAE3B,cAAc,CAACa,GAAf,CAAmBS,QAAnB,EADO;AAEXpB,QAAAA,KAAK,EAAEF,cAAc,CAACE,KAFX;AAGXC,QAAAA,OAAO,EAAEH,cAAc,CAACG,OAHb;AAIXF,QAAAA,KAAK,EAAED,cAAc,CAACC,KAJX;AAKXG,QAAAA,WAAW,EAAEJ,cAAc,CAACI;AALjB;AADN;AADD,GAAP;AAWA;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\r\n\r\nconst MeetupDetails = (props) => {\r\n\treturn (\r\n\t\t<MeetupDetail\r\n\t\t\timage={props.selectedMeetup.image}\r\n\t\t\ttitle={props.selectedMeetup.title}\r\n\t\t\taddress={props.selectedMeetup.address}\r\n\t\t\tdescription={props.selectedMeetup.description}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n\t//fetch data from an API or database\r\n\tconst client = await MongoClient.connect(\r\n\t\t'mongodb+srv://dragoshjianu:dragosh23@cluster0.nna1u.mongodb.net/meetups?retryWrites=true&w=majority'\r\n\t);\r\n\tconst db = client.db();\r\n\r\n\tconst meetupsCollection = db.collection('meetups');\r\n\r\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\tfallback: false,\r\n\t\tpaths: meetups.map((meetup) => ({ params: { meetupId: meetup._id.toString() } })),\r\n\t};\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\t// fetch data for a single meetup\r\n\r\n\tconst meetupId = context.params.meetupId;\r\n\r\n\tconst client = await MongoClient.connect(\r\n\t\t'mongodb+srv://dragoshjianu:dragosh23@cluster0.nna1u.mongodb.net/meetups?retryWrites=true&w=majority'\r\n\t);\r\n\tconst db = client.db();\r\n\r\n\tconst meetupsCollection = db.collection('meetups');\r\n\r\n\tconst selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\r\n\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tmeetupData: {\r\n\t\t\t\tid: selectedMeetup._id.toString(),\r\n\t\t\t\ttitle: selectedMeetup.title,\r\n\t\t\t\taddress: selectedMeetup.address,\r\n\t\t\t\timage: selectedMeetup.image,\r\n\t\t\t\tdescription: selectedMeetup.description,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}