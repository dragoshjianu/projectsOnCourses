{"version":3,"file":"static/js/884.e21ce3e1.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN =\n\t'https://react-http-f44be-default-rtdb.europe-west1.firebasedatabase.app';\n\nexport async function getAllQuotes() {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not fetch quotes.');\n\t}\n\n\tconst transformedQuotes = [];\n\n\tfor (const key in data) {\n\t\tconst quoteObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedQuotes.push(quoteObj);\n\t}\n\n\treturn transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not fetch quote.');\n\t}\n\n\tconst loadedQuote = {\n\t\tid: quoteId,\n\t\t...data,\n\t};\n\n\treturn loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(quoteData),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t});\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not create quote.');\n\t}\n\n\treturn null;\n}\n\nexport async function addComment(requestData) {\n\tconst response = await fetch(\n\t\t`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(requestData.commentData),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}\n\t);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not add comment.');\n\t}\n\n\treturn { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not get comments.');\n\t}\n\n\tconst transformedComments = [];\n\n\tfor (const key in data) {\n\t\tconst commentObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedComments.push(commentObj);\n\t}\n\n\treturn transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__B4Ghf\"};","import classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return <div className={classes.card}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ikalo\",\"loading\":\"QuoteForm_loading__RrQhP\",\"control\":\"QuoteForm_control__YUZR8\",\"actions\":\"QuoteForm_actions__RRiEa\"};","import { useRef, useState } from 'react';\r\nimport { Prompt } from 'react-router-dom';\r\n\r\nimport Card from '../UI/Card';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport classes from './QuoteForm.module.css';\r\n\r\nconst QuoteForm = (props) => {\r\n\tconst [isEntering, setIsEntering] = useState(false);\r\n\tconst authorInputRef = useRef();\r\n\tconst textInputRef = useRef();\r\n\r\n\tfunction submitFormHandler(event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst enteredAuthor = authorInputRef.current.value;\r\n\t\tconst enteredText = textInputRef.current.value;\r\n\r\n\t\t// optional: Could validate here\r\n\r\n\t\tprops.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n\t}\r\n\r\n\tconst finishEnteringHandler = () => {\r\n\t\tsetIsEntering(false);\r\n\t};\r\n\r\n\tconst formFocusHandler = () => {\r\n\t\tsetIsEntering(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Prompt\r\n\t\t\t\twhen={isEntering}\r\n\t\t\t\tmessage={(localtion) => 'Are you sure? All your entered data will be lost'}\r\n\t\t\t/>\r\n\t\t\t<Card>\r\n\t\t\t\t<form\r\n\t\t\t\t\tonFocus={formFocusHandler}\r\n\t\t\t\t\tclassName={classes.form}\r\n\t\t\t\t\tonSubmit={submitFormHandler}\r\n\t\t\t\t>\r\n\t\t\t\t\t{props.isLoading && (\r\n\t\t\t\t\t\t<div className={classes.loading}>\r\n\t\t\t\t\t\t\t<LoadingSpinner />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<div className={classes.control}>\r\n\t\t\t\t\t\t<label htmlFor='author'>Author</label>\r\n\t\t\t\t\t\t<input type='text' id='author' ref={authorInputRef} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={classes.control}>\r\n\t\t\t\t\t\t<label htmlFor='text'>Text</label>\r\n\t\t\t\t\t\t<textarea id='text' rows='5' ref={textInputRef}></textarea>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={classes.actions}>\r\n\t\t\t\t\t\t<button onClick={finishEnteringHandler} className='btn'>\r\n\t\t\t\t\t\t\tAdd Quote\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default QuoteForm;\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\n\r\nconst NewQuote = () => {\r\n\tconst { sendRequest, status } = useHttp(addQuote);\r\n\tconst history = useHistory();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (status === 'completed') {\r\n\t\t\thistory.push('/quotes');\r\n\t\t}\r\n\t}, [status, history]);\r\n\r\n\tconst addQuoteHandler = (quoteData) => {\r\n\t\tsendRequest(quoteData);\r\n\t};\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default NewQuote;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","children","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","localtion","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","useHttp","history","useHistory","useEffect"],"sourceRoot":""}